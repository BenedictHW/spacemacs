;;; greader-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from greader.el

(autoload 'greader-mode "greader" "\
Toggle greader mode on or off.

This is a minor mode.  If called interactively, toggle the
`greader mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `greader-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{greader-mode-map}

(fn &optional ARG)" t)
(autoload 'greader-reading-mode "greader" "\
Toggle Greader-Reading mode on or off.

This is a minor mode.  If called interactively, toggle the
`Greader-Reading mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `greader-reading-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{greader-reading-map}

(fn &optional ARG)")
(defvar greader-auto-bookmark-mode nil "\
Non-nil if Greader-Auto-Bookmark mode is enabled.
See the `greader-auto-bookmark-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `greader-auto-bookmark-mode'.")
(custom-autoload 'greader-auto-bookmark-mode "greader" nil)
(autoload 'greader-auto-bookmark-mode "greader" "\
Enable automatic bookmarking.

Each time the reading of the buffer is stopped a bookmark is saved
when the buffer is visiting a file.

This is a global minor mode.  If called interactively, toggle the
`Greader-Auto-Bookmark mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='greader-auto-bookmark-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(defvar greader-compile-dictsource nil "\
Location of espeak dictionary source data.
You must configure this variable in order to use
  `greader-compile-mode'.")
(custom-autoload 'greader-compile-dictsource "greader" t)
(defvar greader-compile-mode nil "\
Non-nil if Greader-Compile mode is enabled.
See the `greader-compile-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `greader-compile-mode'.")
(custom-autoload 'greader-compile-mode "greader" nil)
(autoload 'greader-compile-mode "greader" "\
Espeak voice definition and compilation mode.

This global minor mode of greader allows saving of an
espeak-ng dictionary file and subsequent correspondent voice compilation
in one shot.
In some cases, the directory where espeak-ng keeps its data
is not writable by the normal user, in this case, when
saving the file, you will be asked to enter your password
administrator.

This is a global minor mode.  If called interactively, toggle the
`Greader-Compile mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='greader-compile-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'greader-queue-mode "greader" "\
Read buffers as blocks of text.

In this mode, text reading occurs via blocks.  normally greader
reads the text of a buffer sequentially; in queue-mode you add blocks
of text to a queue, so you can choose only certain parts of the
buffer.  As reading progresses, further blocks can be added, or you
can add the blocks and then start reading.

This is a minor mode.  If called interactively, toggle the
`greader-queue mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `greader-queue-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{greader-queue-mode-map}

(fn &optional ARG)" t)
(defvar greader-enriched-mode nil "\
Non-nil if Greader-Enriched mode is enabled.
See the `greader-enriched-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `greader-enriched-mode'.")
(custom-autoload 'greader-enriched-mode "greader" nil)
(autoload 'greader-enriched-mode "greader" "\
This mode causes greader to announce clickable objects.

To configure the message with which it must be announced
the element, configure the `greader-enriched-tag' variable.

This is a global minor mode.  If called interactively, toggle the
`Greader-Enriched mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='greader-enriched-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'greader-study-set-position "greader" "\
Set the position in which reading will restart.
When called interactively, use the current position in the buffer.

(fn POS)" t)
(register-definition-prefixes "greader" '("greader-"))


;;; Generated autoloads from greader-audiobook.el

(autoload 'greader-audiobook-buffer "greader-audiobook" "\
Convert current buffer to an audiobook starting at START-POSITION.
With prefix, the conversion will start from the beginning of the
buffer, otherwise it will start from point to the end.
If region is active, only the region will be converted.
This function will create a directory under
`greader-audiobook-base-directory with the same name as the
buffer without the extension, if any.

(fn &optional START-POSITION)" t)
(register-definition-prefixes "greader-audiobook" '("greader-audiobook-"))


;;; Generated autoloads from greader-dict.el

(autoload 'greader-dict-toggle-filters "greader-dict" "\
enable or disable filters.

Filters allow you to replace every regexp you wish with something
else you wish.
While matches and words are conceived as facilities that are
designated to be user-friendly interfaces to regexps, with filters
you can unleash all
your expressiveness!
Filters and dictionary are considered independent features for now, so
you can enable filters without the extra payload given by
`greader-dict-mode'.
To use a filter you must first enable this mode, and, eventually, add
a filter.
So use `greader-dict-filter-add' to do that.
When you are prompted for the filter, you should insert the regexp
that must match to have the associated replacement.
You can use the usual `\\\\' expressions, shy groups and all the power
of regexps.
If you are interested in how to write a regexp please consult the info
node `(emacs) Regexps'.

This is a minor mode.  If called interactively, toggle the
`Greader-Dict-Filters mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `greader-dict-toggle-filters'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'greader-dict-mode "greader-dict" "\
Dictionary module for greader.

With this mode it is possible to instruct greader to pronounce in an 
alternative way the words that the tts mispronounces in a given language.
There are two types of definitions understood by greader-dict-mode:
\"word definitions\" are those that must be surrounded by
Non-constituent word characters;
\"Match definitions\" are those that can be replaced regardless of
surrounding characters.
The definition type is determined when you add a new definition:
If you use the region to mark a word, you can select a partial word or
the entire word, and greader-dict-mode will understand that you want
to add a match definition.
If instead you add simply the word under the point, it will be added
as a word definition.

This is a minor mode.  If called interactively, toggle the
`Greader-Dict mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `greader-dict-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'greader-dict-check-and-replace "greader-dict" "\
Return the TEXT passed to it, eventually modified according to
`greader-dictionary' and variants.

(fn TEXT)")
(autoload 'greader-dict-pronounce-in-other-language "greader-dict" "\
pronounce WORD in the language specified by NEW-LANG.
The currently configured backend will be used for the voice.
NEW-LANG should be an ISO code, compatible with the back-end you are
using.
If the variable `greader-dict-include-sentences-in-defaults is enabled, when
asked about the word to pronounce, the defaults will be a set of words
in the current sentence.

(fn WORD NEW-LANG)" t)
(register-definition-prefixes "greader-dict" '("greader-" "ignore-case"))


;;; Generated autoloads from greader-espeak.el

(autoload 'greader-espeak "greader-espeak" "\
Back-end main function for espeak.
COMMAND must be a string suitable for `make-process'.
ARG is applied depending on the command.

(fn COMMAND &optional ARG)")
(register-definition-prefixes "greader-espeak" '("greader-espeak-"))


;;; Generated autoloads from greader-mac.el

(autoload 'greader-mac "greader-mac" "\
Back-end main function of greader-mac.
COMMAND must be a string suitable for `make-process'.

(fn COMMAND &optional ARG)")
(register-definition-prefixes "greader-mac" '("greader-"))


;;; Generated autoloads from greader-speechd.el

(autoload 'greader-speechd "greader-speechd" "\
greader speech-dispatcher back-end.

(fn COMMAND &optional ARG)")
(register-definition-prefixes "greader-speechd" '("greader-speechd-"))


;;; Generated autoloads from greader-translate.el

(autoload 'greader-translate-mode "greader-translate" "\
Toggle Greader-Translate mode on or off.

This is a minor mode.  If called interactively, toggle the
`Greader-Translate mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `greader-translate-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "greader-translate" '("greader-translate"))

;;; End of scraped data

(provide 'greader-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; greader-autoloads.el ends here
